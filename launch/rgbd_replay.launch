
<launch>

    <arg name="camera1"         default="camera_purple" />
    <arg name="camera2"         default="camera_yellow" />
    <arg name="env_camera"      default="env_camera" />
    <arg name="repub1"          default="$(arg camera1)_bag" />
    <arg name="repub2"          default="$(arg camera2)_bag" />
    <arg name="repub_env"       default="$(arg env_camera)_bag" />

    <param name="sandtray_description" command="$(find xacro)/xacro --inorder
                                                $(find freeplay_sandbox)/urdf/sandtray.xacro
                                                camera1:=$(arg camera1)
                                                camera2:=$(arg camera2)
                                                env_camera:=$(arg env_camera)" />


    <arg name="bag" />

    <arg name="loop" default="false" />
    <arg name="keepalive" default="false" />
    <arg name="start" default="0" />
    <arg name="delay" default="0" />
    <arg name="rate" default="1.0" />

    <!-- Disable respawn topics by default -->
    <arg name="respawn" default="false" />


    <!-- Republish camera1 -->
    <node pkg="image_transport" type="republish" name="camera1_rgb_republish"
          required="true" output="screen"
          args="compressed in:=$(arg repub1)/rgb/image_raw out:=$(arg camera1)/rgb/image_raw" />

    <node pkg="image_transport" type="republish" name="camera1_depth_republish"
          required="true" output="screen"
          args="compressedDepth in:=$(arg repub1)/depth/image_raw out:=$(arg camera1)/depth/image_raw" />


    <!-- Republish camera1 -->
    <node pkg="image_transport" type="republish" name="camera2_rgb_republish"
          required="true" output="screen"
          args="compressed in:=$(arg repub2)/rgb/image_raw out:=$(arg camera2)/rgb/image_raw" />

    <node pkg="image_transport" type="republish" name="camera2_depth_republish"
          required="true" output="screen"
          args="compressedDepth in:=$(arg repub2)/depth/image_raw out:=$(arg camera2)/depth/image_raw" />

    <!-- Republish env_camera -->
    <node pkg="image_transport" type="republish" name="env_camera_rgb_republish"
          required="true" output="screen"
          args="compressed in:=$(arg repub_env)/qhd/image_color out:=$(arg env_camera)/qhd/image_color" />

    <arg name="camera_info_repub" default="
                    $(arg camera1)/rgb/image_raw/compressed:=$(arg repub1)/rgb/image_raw/compressed
                    $(arg camera1)/depth/image_raw/compressedDepth:=$(arg repub1)/depth/image_raw/compressedDepth
                    $(arg camera2)/rgb/image_raw/compressed:=$(arg repub2)/rgb/image_raw/compressed
                    $(arg camera2)/depth/image_raw/compressedDepth:=$(arg repub2)/depth/image_raw/compressedDepth
                    $(arg env_camera)/qhd/image_color:=$(arg repub_env)/qhd/image_color
                    "/>

    <!-- Republish sandtray background -->
    <!--
    <node pkg="topic_tools" type="throttle" name="sandtray_images_throttle"
        args="messages /sandtray/background/image 4.0"
        output="screen" required="true" />
        <node pkg="image_transport" type="republish" name="sandtray_background_republish"
          required="true" output="screen"
          args="compress in:=/sandtray/background/image out:=/sandtray/background/image_" />
          -->




    <!-- Worker threads for the nodelet manager -->
    <arg name="num_worker_threads" default="4" />

    <!-- Push down all topics/nodelets into "camera" namespace -->
    <group ns="$(arg camera1)">

        <!-- Start nodelet manager in provided namespace -->
        <arg name="manager" value="$(arg camera1)_nodelet_manager" />
        <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name"                value="$(arg manager)" />
            <arg name="debug"               value="false" /> <!-- run in GDB? -->
            <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
        </include>

        <!-- Load standard constellation of processing nodelets -->
        <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
            <arg name="manager"                         value="$(arg manager)" />
            <arg name="rgb"                             value="rgb" />
            <arg name="ir"                              value="ir" />
            <arg name="depth"                           value="depth" />
            <arg name="depth_registered"                value="depth_registered" />
            <arg name="respawn"                         value="$(arg respawn)" />
            <arg name="rgb_processing"                  default="true"/>
            <arg name="debayer_processing"              default="false"/> <!-- to generate the mono version of the RGB streams -->
            <arg name="ir_processing"                   default="false"/>
            <arg name="depth_processing"                default="true"/>
            <arg name="depth_registered_processing"     default="true"/>
            <arg name="disparity_processing"            default="false"/>
            <arg name="disparity_registered_processing" default="false"/>
            <arg name="hw_registered_processing"        default="false" />
            <arg name="sw_registered_processing"        default="true" />
        </include>

    </group>

    <!-- Push down all topics/nodelets into "camera" namespace -->
    <group ns="$(arg camera2)">

        <!-- Start nodelet manager in provided namespace -->
        <arg name="manager" value="$(arg camera2)_nodelet_manager" />
        <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name"                value="$(arg manager)" />
            <arg name="debug"               value="false" /> <!-- run in GDB? -->
            <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
        </include>

        <!-- Load standard constellation of processing nodelets -->
        <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
            <arg name="manager"                         value="$(arg manager)" />
            <arg name="rgb"                             value="rgb" />
            <arg name="ir"                              value="ir" />
            <arg name="depth"                           value="depth" />
            <arg name="depth_registered"                value="depth_registered" />
            <arg name="respawn"                         value="$(arg respawn)" />
            <arg name="rgb_processing"                  default="true"/>
            <arg name="debayer_processing"              default="false"/> <!-- to generate the mono version of the RGB streams -->
            <arg name="ir_processing"                   default="false"/>
            <arg name="depth_processing"                default="true"/>
            <arg name="depth_registered_processing"     default="true"/>
            <arg name="disparity_processing"            default="false"/>
            <arg name="disparity_registered_processing" default="false"/>
            <arg name="hw_registered_processing"        default="false" />
            <arg name="sw_registered_processing"        default="true" />
        </include>

    </group>

    <!-- manually republish the SR300 frames at high frequency -->
    <node pkg="freeplay_sandbox_analysis" type="tf_camera_replicator" name="tf_cameras_frames" output="screen" required="true" />

    <!-- replay the bag file! -->
    <group if="$(arg loop)">
    <node pkg="rosbag" type="play" name="rosbag_play_freeplay_sandbox" required="true"
        args="--clock --loop $(arg bag) -s $(arg start) -r $(arg rate) -d $(arg delay) $(arg camera_info_repub)"
        output="screen" />
    </group>
    <group unless="$(arg loop)">
        <node if="$(arg keepalive)" pkg="rosbag" type="play" name="rosbag_play_freeplay_sandbox" required="true"
            args="--clock --keep-alive $(arg bag)  -s $(arg start) -r $(arg rate) -d $(arg delay) $(arg camera_info_repub)"
            output="screen" />
        <node unless="$(arg keepalive)" pkg="rosbag" type="play" name="rosbag_play_freeplay_sandbox" required="true"
            args="--clock $(arg bag)  -s $(arg start) -r $(arg rate) -d $(arg delay) $(arg camera_info_repub)"
            output="screen" />
    </group>

</launch>
