#! /usr/bin/env python

import sys
import os
import yaml
from rosbag.bag import Bag

MALE = "male"
FEMALE = "female"
CHILDCHILD = "childchild"
CHILDROBOT = "childrobot"

def hhmmss(sec):
    return "%02d:%02d:%02d" % (sec//3600,(sec%3600)//60, (sec%3600)%60)

class Child:

    def __init__(self, participant):
        self.age = participant["age"]
        self.gender = participant["gender"]
        self.id = participant["id"]
        self.details = participant["details"]

class Record:

    def __init__(self, experiment, bagfile):
        self.experiment = experiment
        self.bagfile = bagfile

        self.duration = self.bagfile["duration"]

        self.cdt = self.experiment["condition"]

        self.children = [Child(self.experiment["purple-participant"])]
        if self.cdt == CHILDCHILD:
            self.children.append(Child(self.experiment["yellow-participant"]))

        # total_child_duration is the total duration per child (ie, bag duration * nb of children recorded)
        self.total_child_duration = self.duration * len(self.children)

class Dataset:

    def __init__(self, root):

        self.dataset = []

        for dirpath, dirs, files in os.walk(root, topdown=False):
            for name in files:
                fullpath = os.path.join(dirpath, name)
                if name == "experiment.yaml":
                    print("Processing %s" % fullpath)
                    self.processpath(dirpath)

        self.total_duration = 0
        self.total_child_duration = 0
        self.nb_children = 0

        for record in self.dataset:
            self.total_duration += record.duration
            self.total_child_duration += record.total_child_duration
            self.nb_children += len(record.children)

    def __str__(self):

        return "Total records: %d" % len(self.dataset) + "\n" + \
               "Total duration: %s" % hhmmss(self.total_duration) + "\n" + \
               "Average duration per record: %s" % hhmmss(self.total_duration/len(self.dataset)) + "\n" + \
                "Total children: %d" % self.nb_children + "\n" + \
                "Total children duration: %s" % hhmmss(self.total_child_duration) + "\n" + \
                "Average duration per child: %s" % hhmmss(self.total_child_duration / self.nb_children)

    def processpath(self, path):

        with open(os.path.join(path, "experiment.yaml"), 'r') as yml:
            expe = yaml.load(yml)

        bagpath =  os.path.join(path, "freeplay.bag")
        if os.path.exists(bagpath):
            yamlfile = os.path.join(path, "freeplay.bag.yaml")
            if os.path.exists(yamlfile):
                with open(yamlfile, 'r') as yml:
                    bagfile = yaml.load(yml)
            else:
                print("Found a freeplay.bag without YAML description. Parsing the bag <%s> now..." % bagpath)
                bagfile = yaml.load(Bag(bagpath, 'r')._get_yaml_info())
                with open(yamlfile, 'w') as outfile:
                    yaml.dump(info_dict, outfile, default_flow_style=False)
                    print("%s successfully saved." % yamlfile)

            self.dataset.append(Record(expe, bagfile))
        else:
            print("Missing freeplay.bag!!")

if __name__ == "__main__":

    dataset = Dataset(sys.argv[1])
    print(dataset)
